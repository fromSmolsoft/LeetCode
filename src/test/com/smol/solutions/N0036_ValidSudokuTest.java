package com.smol.solutions;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;


/**
 * <pre>
 * Example 1:
 * -------------------
 * |5|3| | |7| | | | |
 * |-+-+-|-+-+-|-+-+-|
 * |6| | |1|9|5| | | |
 * |-+-+-|-+-+-|-+-+-|
 * | |9|8| | | | |6| |
 * |-----------------|
 * |8| | | |6| | | |3|
 * |-+-+-|-+-+-|-+-+-|
 * |4| | |8| |3| | |1|
 * |-+-+-|-+-+-|-+-+-|
 * |7| | | |2| | | |6|
 * |-----------------|
 * | |6| | | | | | | |
 * |-+-+-|-+-+-|-+-+-|
 * | | | |4|1|9| | | |
 * |-+-+-|-+-+-|-+-+-|
 * | | | | |8| | | | |
 * -------------------
 *
 * Input: board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * Output: true
 *
 * Example 2:
 * Input: board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 *
 * Output: false
 * Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 *
 * Constraints:
 *     board.length == 9
 *     board[i].length == 9
 *     board[i][j] is a digit 1-9 or '.'.
 * </pre>
 */
class N0036_ValidSudokuTest {

    private N0036_ValidSudoku obj = new N0036_ValidSudoku();

    @ParameterizedTest
    @CsvSource(delimiter = ';', value = {
            "true;" +
            "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]" +
            ",[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]" +
            ",[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]" +
            ",[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]" +
            ",[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]" +
            ",[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]" +
            ",[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]" +
            ",[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]" +
            ",[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",

            "false;" +
            "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]" +
            ",[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]" +
            ",[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]" +
            ",[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]" +
            ",[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]" +
            ",[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]" +
            ",[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]" +
            ",[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]" +
            ",[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]",

            "false;" +
            "[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]" +
            ",[\"6\",\"2\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]" +
            ",[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]" +
            ",[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]" +
            ",[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]" +
            ",[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]" +
            ",[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]" +
            ",[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]" +
            ",[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"


    })
    void isValidSudoku(boolean exp, String sChars2DArray) {
        String[] lines = TestUtils.StringToStringArray(sChars2DArray, "],\\[");
        TestUtils.RemoveSubStrings(lines, "\"", "[", "[", "\"", "\"", "]", "]", "\"");
        char[][] board = new char[lines.length][];
        for (int i = 0; i < lines.length; i++) {
            String s = lines[i];
            char[] chars = TestUtils.StringToCharArray(s, ",");
            board[i] = chars;
        }
        boolean act;

        act = obj.isValidSudoku(board);
        Assertions.assertEquals(exp, act);

        act = obj.isValidSudokuS(board);
        Assertions.assertEquals(exp, act);

    }
}